/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meituan.firefly.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-24")
public class ComplicatedStruct implements org.apache.thrift.TBase<ComplicatedStruct, ComplicatedStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ComplicatedStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComplicatedStruct");

  private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.I32, (short)-1);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.I64, (short)-2);
  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.DOUBLE, (short)-3);
  private static final org.apache.thrift.protocol.TField SHORT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("shortSet", org.apache.thrift.protocol.TType.SET, (short)-4);
  private static final org.apache.thrift.protocol.TField INT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("intSet", org.apache.thrift.protocol.TType.SET, (short)-5);
  private static final org.apache.thrift.protocol.TField MIX_STRUCTLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mixStructlist", org.apache.thrift.protocol.TType.LIST, (short)-6);
  private static final org.apache.thrift.protocol.TField SHORT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("shortList", org.apache.thrift.protocol.TType.LIST, (short)-7);
  private static final org.apache.thrift.protocol.TField ORDERED_STRUCT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderedStructMap", org.apache.thrift.protocol.TType.MAP, (short)-8);
  private static final org.apache.thrift.protocol.TField MIX_STRUCT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mixStructMap", org.apache.thrift.protocol.TType.MAP, (short)-9);
  private static final org.apache.thrift.protocol.TField ORDER_ENUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderEnum", org.apache.thrift.protocol.TType.I32, (short)-10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComplicatedStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComplicatedStructTupleSchemeFactory());
  }

  public int a; // required
  public long b; // required
  public double c; // required
  public Set<Short> shortSet; // required
  public Set<Integer> intSet; // required
  public List<MixStruct> mixStructlist; // required
  public List<Short> shortList; // required
  public Map<Short,OrderedStruct> orderedStructMap; // required
  public Map<Short,MixStruct> mixStructMap; // required
  /**
   * 
   * @see OrderEnum
   */
  public OrderEnum orderEnum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A((short)-1, "a"),
    B((short)-2, "b"),
    C((short)-3, "c"),
    SHORT_SET((short)-4, "shortSet"),
    INT_SET((short)-5, "intSet"),
    MIX_STRUCTLIST((short)-6, "mixStructlist"),
    SHORT_LIST((short)-7, "shortList"),
    ORDERED_STRUCT_MAP((short)-8, "orderedStructMap"),
    MIX_STRUCT_MAP((short)-9, "mixStructMap"),
    /**
     * 
     * @see OrderEnum
     */
    ORDER_ENUM((short)-10, "orderEnum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case -1: // A
          return A;
        case -2: // B
          return B;
        case -3: // C
          return C;
        case -4: // SHORT_SET
          return SHORT_SET;
        case -5: // INT_SET
          return INT_SET;
        case -6: // MIX_STRUCTLIST
          return MIX_STRUCTLIST;
        case -7: // SHORT_LIST
          return SHORT_LIST;
        case -8: // ORDERED_STRUCT_MAP
          return ORDERED_STRUCT_MAP;
        case -9: // MIX_STRUCT_MAP
          return MIX_STRUCT_MAP;
        case -10: // ORDER_ENUM
          return ORDER_ENUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A_ISSET_ID = 0;
  private static final int __B_ISSET_ID = 1;
  private static final int __C_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHORT_SET, new org.apache.thrift.meta_data.FieldMetaData("shortSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_SET, new org.apache.thrift.meta_data.FieldMetaData("intSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MIX_STRUCTLIST, new org.apache.thrift.meta_data.FieldMetaData("mixStructlist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MixStruct.class))));
    tmpMap.put(_Fields.SHORT_LIST, new org.apache.thrift.meta_data.FieldMetaData("shortList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.ORDERED_STRUCT_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderedStructMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderedStruct.class))));
    tmpMap.put(_Fields.MIX_STRUCT_MAP, new org.apache.thrift.meta_data.FieldMetaData("mixStructMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MixStruct.class))));
    tmpMap.put(_Fields.ORDER_ENUM, new org.apache.thrift.meta_data.FieldMetaData("orderEnum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OrderEnum.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComplicatedStruct.class, metaDataMap);
  }

  public ComplicatedStruct() {
    this.a = 12345;

    this.b = 100L;

    this.c = 99.99;

    this.shortSet = new HashSet<Short>();
    this.shortSet.add((short)1);
    this.shortSet.add((short)2);
    this.shortSet.add((short)3);

    this.intSet = new HashSet<Integer>();
    this.intSet.add(4);
    this.intSet.add(5);
    this.intSet.add(6);

  }

  public ComplicatedStruct(
    int a,
    long b,
    double c,
    Set<Short> shortSet,
    Set<Integer> intSet,
    List<MixStruct> mixStructlist,
    List<Short> shortList,
    Map<Short,OrderedStruct> orderedStructMap,
    Map<Short,MixStruct> mixStructMap,
    OrderEnum orderEnum)
  {
    this();
    this.a = a;
    setAIsSet(true);
    this.b = b;
    setBIsSet(true);
    this.c = c;
    setCIsSet(true);
    this.shortSet = shortSet;
    this.intSet = intSet;
    this.mixStructlist = mixStructlist;
    this.shortList = shortList;
    this.orderedStructMap = orderedStructMap;
    this.mixStructMap = mixStructMap;
    this.orderEnum = orderEnum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComplicatedStruct(ComplicatedStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a = other.a;
    this.b = other.b;
    this.c = other.c;
    if (other.isSetShortSet()) {
      Set<Short> __this__shortSet = new HashSet<Short>(other.shortSet);
      this.shortSet = __this__shortSet;
    }
    if (other.isSetIntSet()) {
      Set<Integer> __this__intSet = new HashSet<Integer>(other.intSet);
      this.intSet = __this__intSet;
    }
    if (other.isSetMixStructlist()) {
      List<MixStruct> __this__mixStructlist = new ArrayList<MixStruct>(other.mixStructlist.size());
      for (MixStruct other_element : other.mixStructlist) {
        __this__mixStructlist.add(new MixStruct(other_element));
      }
      this.mixStructlist = __this__mixStructlist;
    }
    if (other.isSetShortList()) {
      List<Short> __this__shortList = new ArrayList<Short>(other.shortList);
      this.shortList = __this__shortList;
    }
    if (other.isSetOrderedStructMap()) {
      Map<Short,OrderedStruct> __this__orderedStructMap = new HashMap<Short,OrderedStruct>(other.orderedStructMap.size());
      for (Map.Entry<Short, OrderedStruct> other_element : other.orderedStructMap.entrySet()) {

        Short other_element_key = other_element.getKey();
        OrderedStruct other_element_value = other_element.getValue();

        Short __this__orderedStructMap_copy_key = other_element_key;

        OrderedStruct __this__orderedStructMap_copy_value = new OrderedStruct(other_element_value);

        __this__orderedStructMap.put(__this__orderedStructMap_copy_key, __this__orderedStructMap_copy_value);
      }
      this.orderedStructMap = __this__orderedStructMap;
    }
    if (other.isSetMixStructMap()) {
      Map<Short,MixStruct> __this__mixStructMap = new HashMap<Short,MixStruct>(other.mixStructMap.size());
      for (Map.Entry<Short, MixStruct> other_element : other.mixStructMap.entrySet()) {

        Short other_element_key = other_element.getKey();
        MixStruct other_element_value = other_element.getValue();

        Short __this__mixStructMap_copy_key = other_element_key;

        MixStruct __this__mixStructMap_copy_value = new MixStruct(other_element_value);

        __this__mixStructMap.put(__this__mixStructMap_copy_key, __this__mixStructMap_copy_value);
      }
      this.mixStructMap = __this__mixStructMap;
    }
    if (other.isSetOrderEnum()) {
      this.orderEnum = other.orderEnum;
    }
  }

  public ComplicatedStruct deepCopy() {
    return new ComplicatedStruct(this);
  }

  @Override
  public void clear() {
    this.a = 12345;

    this.b = 100L;

    this.c = 99.99;

    this.shortSet = new HashSet<Short>();
    this.shortSet.add((short)1);
    this.shortSet.add((short)2);
    this.shortSet.add((short)3);

    this.intSet = new HashSet<Integer>();
    this.intSet.add(4);
    this.intSet.add(5);
    this.intSet.add(6);

    this.mixStructlist = null;
    this.shortList = null;
    this.orderedStructMap = null;
    this.mixStructMap = null;
    this.orderEnum = null;
  }

  public int getA() {
    return this.a;
  }

  public ComplicatedStruct setA(int a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_ISSET_ID);
  }

  /** Returns true if field a is set (has been assigned a value) and false otherwise */
  public boolean isSetA() {
    return EncodingUtils.testBit(__isset_bitfield, __A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_ISSET_ID, value);
  }

  public long getB() {
    return this.b;
  }

  public ComplicatedStruct setB(long b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public double getC() {
    return this.c;
  }

  public ComplicatedStruct setC(double c) {
    this.c = c;
    setCIsSet(true);
    return this;
  }

  public void unsetC() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __C_ISSET_ID);
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return EncodingUtils.testBit(__isset_bitfield, __C_ISSET_ID);
  }

  public void setCIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __C_ISSET_ID, value);
  }

  public int getShortSetSize() {
    return (this.shortSet == null) ? 0 : this.shortSet.size();
  }

  public java.util.Iterator<Short> getShortSetIterator() {
    return (this.shortSet == null) ? null : this.shortSet.iterator();
  }

  public void addToShortSet(short elem) {
    if (this.shortSet == null) {
      this.shortSet = new HashSet<Short>();
    }
    this.shortSet.add(elem);
  }

  public Set<Short> getShortSet() {
    return this.shortSet;
  }

  public ComplicatedStruct setShortSet(Set<Short> shortSet) {
    this.shortSet = shortSet;
    return this;
  }

  public void unsetShortSet() {
    this.shortSet = null;
  }

  /** Returns true if field shortSet is set (has been assigned a value) and false otherwise */
  public boolean isSetShortSet() {
    return this.shortSet != null;
  }

  public void setShortSetIsSet(boolean value) {
    if (!value) {
      this.shortSet = null;
    }
  }

  public int getIntSetSize() {
    return (this.intSet == null) ? 0 : this.intSet.size();
  }

  public java.util.Iterator<Integer> getIntSetIterator() {
    return (this.intSet == null) ? null : this.intSet.iterator();
  }

  public void addToIntSet(int elem) {
    if (this.intSet == null) {
      this.intSet = new HashSet<Integer>();
    }
    this.intSet.add(elem);
  }

  public Set<Integer> getIntSet() {
    return this.intSet;
  }

  public ComplicatedStruct setIntSet(Set<Integer> intSet) {
    this.intSet = intSet;
    return this;
  }

  public void unsetIntSet() {
    this.intSet = null;
  }

  /** Returns true if field intSet is set (has been assigned a value) and false otherwise */
  public boolean isSetIntSet() {
    return this.intSet != null;
  }

  public void setIntSetIsSet(boolean value) {
    if (!value) {
      this.intSet = null;
    }
  }

  public int getMixStructlistSize() {
    return (this.mixStructlist == null) ? 0 : this.mixStructlist.size();
  }

  public java.util.Iterator<MixStruct> getMixStructlistIterator() {
    return (this.mixStructlist == null) ? null : this.mixStructlist.iterator();
  }

  public void addToMixStructlist(MixStruct elem) {
    if (this.mixStructlist == null) {
      this.mixStructlist = new ArrayList<MixStruct>();
    }
    this.mixStructlist.add(elem);
  }

  public List<MixStruct> getMixStructlist() {
    return this.mixStructlist;
  }

  public ComplicatedStruct setMixStructlist(List<MixStruct> mixStructlist) {
    this.mixStructlist = mixStructlist;
    return this;
  }

  public void unsetMixStructlist() {
    this.mixStructlist = null;
  }

  /** Returns true if field mixStructlist is set (has been assigned a value) and false otherwise */
  public boolean isSetMixStructlist() {
    return this.mixStructlist != null;
  }

  public void setMixStructlistIsSet(boolean value) {
    if (!value) {
      this.mixStructlist = null;
    }
  }

  public int getShortListSize() {
    return (this.shortList == null) ? 0 : this.shortList.size();
  }

  public java.util.Iterator<Short> getShortListIterator() {
    return (this.shortList == null) ? null : this.shortList.iterator();
  }

  public void addToShortList(short elem) {
    if (this.shortList == null) {
      this.shortList = new ArrayList<Short>();
    }
    this.shortList.add(elem);
  }

  public List<Short> getShortList() {
    return this.shortList;
  }

  public ComplicatedStruct setShortList(List<Short> shortList) {
    this.shortList = shortList;
    return this;
  }

  public void unsetShortList() {
    this.shortList = null;
  }

  /** Returns true if field shortList is set (has been assigned a value) and false otherwise */
  public boolean isSetShortList() {
    return this.shortList != null;
  }

  public void setShortListIsSet(boolean value) {
    if (!value) {
      this.shortList = null;
    }
  }

  public int getOrderedStructMapSize() {
    return (this.orderedStructMap == null) ? 0 : this.orderedStructMap.size();
  }

  public void putToOrderedStructMap(short key, OrderedStruct val) {
    if (this.orderedStructMap == null) {
      this.orderedStructMap = new HashMap<Short,OrderedStruct>();
    }
    this.orderedStructMap.put(key, val);
  }

  public Map<Short,OrderedStruct> getOrderedStructMap() {
    return this.orderedStructMap;
  }

  public ComplicatedStruct setOrderedStructMap(Map<Short,OrderedStruct> orderedStructMap) {
    this.orderedStructMap = orderedStructMap;
    return this;
  }

  public void unsetOrderedStructMap() {
    this.orderedStructMap = null;
  }

  /** Returns true if field orderedStructMap is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderedStructMap() {
    return this.orderedStructMap != null;
  }

  public void setOrderedStructMapIsSet(boolean value) {
    if (!value) {
      this.orderedStructMap = null;
    }
  }

  public int getMixStructMapSize() {
    return (this.mixStructMap == null) ? 0 : this.mixStructMap.size();
  }

  public void putToMixStructMap(short key, MixStruct val) {
    if (this.mixStructMap == null) {
      this.mixStructMap = new HashMap<Short,MixStruct>();
    }
    this.mixStructMap.put(key, val);
  }

  public Map<Short,MixStruct> getMixStructMap() {
    return this.mixStructMap;
  }

  public ComplicatedStruct setMixStructMap(Map<Short,MixStruct> mixStructMap) {
    this.mixStructMap = mixStructMap;
    return this;
  }

  public void unsetMixStructMap() {
    this.mixStructMap = null;
  }

  /** Returns true if field mixStructMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMixStructMap() {
    return this.mixStructMap != null;
  }

  public void setMixStructMapIsSet(boolean value) {
    if (!value) {
      this.mixStructMap = null;
    }
  }

  /**
   * 
   * @see OrderEnum
   */
  public OrderEnum getOrderEnum() {
    return this.orderEnum;
  }

  /**
   * 
   * @see OrderEnum
   */
  public ComplicatedStruct setOrderEnum(OrderEnum orderEnum) {
    this.orderEnum = orderEnum;
    return this;
  }

  public void unsetOrderEnum() {
    this.orderEnum = null;
  }

  /** Returns true if field orderEnum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderEnum() {
    return this.orderEnum != null;
  }

  public void setOrderEnumIsSet(boolean value) {
    if (!value) {
      this.orderEnum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((Integer)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((Long)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((Double)value);
      }
      break;

    case SHORT_SET:
      if (value == null) {
        unsetShortSet();
      } else {
        setShortSet((Set<Short>)value);
      }
      break;

    case INT_SET:
      if (value == null) {
        unsetIntSet();
      } else {
        setIntSet((Set<Integer>)value);
      }
      break;

    case MIX_STRUCTLIST:
      if (value == null) {
        unsetMixStructlist();
      } else {
        setMixStructlist((List<MixStruct>)value);
      }
      break;

    case SHORT_LIST:
      if (value == null) {
        unsetShortList();
      } else {
        setShortList((List<Short>)value);
      }
      break;

    case ORDERED_STRUCT_MAP:
      if (value == null) {
        unsetOrderedStructMap();
      } else {
        setOrderedStructMap((Map<Short,OrderedStruct>)value);
      }
      break;

    case MIX_STRUCT_MAP:
      if (value == null) {
        unsetMixStructMap();
      } else {
        setMixStructMap((Map<Short,MixStruct>)value);
      }
      break;

    case ORDER_ENUM:
      if (value == null) {
        unsetOrderEnum();
      } else {
        setOrderEnum((OrderEnum)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A:
      return Integer.valueOf(getA());

    case B:
      return Long.valueOf(getB());

    case C:
      return Double.valueOf(getC());

    case SHORT_SET:
      return getShortSet();

    case INT_SET:
      return getIntSet();

    case MIX_STRUCTLIST:
      return getMixStructlist();

    case SHORT_LIST:
      return getShortList();

    case ORDERED_STRUCT_MAP:
      return getOrderedStructMap();

    case MIX_STRUCT_MAP:
      return getMixStructMap();

    case ORDER_ENUM:
      return getOrderEnum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A:
      return isSetA();
    case B:
      return isSetB();
    case C:
      return isSetC();
    case SHORT_SET:
      return isSetShortSet();
    case INT_SET:
      return isSetIntSet();
    case MIX_STRUCTLIST:
      return isSetMixStructlist();
    case SHORT_LIST:
      return isSetShortList();
    case ORDERED_STRUCT_MAP:
      return isSetOrderedStructMap();
    case MIX_STRUCT_MAP:
      return isSetMixStructMap();
    case ORDER_ENUM:
      return isSetOrderEnum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComplicatedStruct)
      return this.equals((ComplicatedStruct)that);
    return false;
  }

  public boolean equals(ComplicatedStruct that) {
    if (that == null)
      return false;

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (this.a != that.a)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_c = true;
    boolean that_present_c = true;
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (this.c != that.c)
        return false;
    }

    boolean this_present_shortSet = true && this.isSetShortSet();
    boolean that_present_shortSet = true && that.isSetShortSet();
    if (this_present_shortSet || that_present_shortSet) {
      if (!(this_present_shortSet && that_present_shortSet))
        return false;
      if (!this.shortSet.equals(that.shortSet))
        return false;
    }

    boolean this_present_intSet = true && this.isSetIntSet();
    boolean that_present_intSet = true && that.isSetIntSet();
    if (this_present_intSet || that_present_intSet) {
      if (!(this_present_intSet && that_present_intSet))
        return false;
      if (!this.intSet.equals(that.intSet))
        return false;
    }

    boolean this_present_mixStructlist = true && this.isSetMixStructlist();
    boolean that_present_mixStructlist = true && that.isSetMixStructlist();
    if (this_present_mixStructlist || that_present_mixStructlist) {
      if (!(this_present_mixStructlist && that_present_mixStructlist))
        return false;
      if (!this.mixStructlist.equals(that.mixStructlist))
        return false;
    }

    boolean this_present_shortList = true && this.isSetShortList();
    boolean that_present_shortList = true && that.isSetShortList();
    if (this_present_shortList || that_present_shortList) {
      if (!(this_present_shortList && that_present_shortList))
        return false;
      if (!this.shortList.equals(that.shortList))
        return false;
    }

    boolean this_present_orderedStructMap = true && this.isSetOrderedStructMap();
    boolean that_present_orderedStructMap = true && that.isSetOrderedStructMap();
    if (this_present_orderedStructMap || that_present_orderedStructMap) {
      if (!(this_present_orderedStructMap && that_present_orderedStructMap))
        return false;
      if (!this.orderedStructMap.equals(that.orderedStructMap))
        return false;
    }

    boolean this_present_mixStructMap = true && this.isSetMixStructMap();
    boolean that_present_mixStructMap = true && that.isSetMixStructMap();
    if (this_present_mixStructMap || that_present_mixStructMap) {
      if (!(this_present_mixStructMap && that_present_mixStructMap))
        return false;
      if (!this.mixStructMap.equals(that.mixStructMap))
        return false;
    }

    boolean this_present_orderEnum = true && this.isSetOrderEnum();
    boolean that_present_orderEnum = true && that.isSetOrderEnum();
    if (this_present_orderEnum || that_present_orderEnum) {
      if (!(this_present_orderEnum && that_present_orderEnum))
        return false;
      if (!this.orderEnum.equals(that.orderEnum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_a = true;
    list.add(present_a);
    if (present_a)
      list.add(a);

    boolean present_b = true;
    list.add(present_b);
    if (present_b)
      list.add(b);

    boolean present_c = true;
    list.add(present_c);
    if (present_c)
      list.add(c);

    boolean present_shortSet = true && (isSetShortSet());
    list.add(present_shortSet);
    if (present_shortSet)
      list.add(shortSet);

    boolean present_intSet = true && (isSetIntSet());
    list.add(present_intSet);
    if (present_intSet)
      list.add(intSet);

    boolean present_mixStructlist = true && (isSetMixStructlist());
    list.add(present_mixStructlist);
    if (present_mixStructlist)
      list.add(mixStructlist);

    boolean present_shortList = true && (isSetShortList());
    list.add(present_shortList);
    if (present_shortList)
      list.add(shortList);

    boolean present_orderedStructMap = true && (isSetOrderedStructMap());
    list.add(present_orderedStructMap);
    if (present_orderedStructMap)
      list.add(orderedStructMap);

    boolean present_mixStructMap = true && (isSetMixStructMap());
    list.add(present_mixStructMap);
    if (present_mixStructMap)
      list.add(mixStructMap);

    boolean present_orderEnum = true && (isSetOrderEnum());
    list.add(present_orderEnum);
    if (present_orderEnum)
      list.add(orderEnum.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(ComplicatedStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortSet()).compareTo(other.isSetShortSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortSet, other.shortSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntSet()).compareTo(other.isSetIntSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intSet, other.intSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMixStructlist()).compareTo(other.isSetMixStructlist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMixStructlist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mixStructlist, other.mixStructlist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortList()).compareTo(other.isSetShortList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortList, other.shortList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderedStructMap()).compareTo(other.isSetOrderedStructMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderedStructMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderedStructMap, other.orderedStructMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMixStructMap()).compareTo(other.isSetMixStructMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMixStructMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mixStructMap, other.mixStructMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderEnum()).compareTo(other.isSetOrderEnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderEnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderEnum, other.orderEnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComplicatedStruct(");
    boolean first = true;

    sb.append("a:");
    sb.append(this.a);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c:");
    sb.append(this.c);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortSet:");
    if (this.shortSet == null) {
      sb.append("null");
    } else {
      sb.append(this.shortSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intSet:");
    if (this.intSet == null) {
      sb.append("null");
    } else {
      sb.append(this.intSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mixStructlist:");
    if (this.mixStructlist == null) {
      sb.append("null");
    } else {
      sb.append(this.mixStructlist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortList:");
    if (this.shortList == null) {
      sb.append("null");
    } else {
      sb.append(this.shortList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderedStructMap:");
    if (this.orderedStructMap == null) {
      sb.append("null");
    } else {
      sb.append(this.orderedStructMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mixStructMap:");
    if (this.mixStructMap == null) {
      sb.append("null");
    } else {
      sb.append(this.mixStructMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderEnum:");
    if (this.orderEnum == null) {
      sb.append("null");
    } else {
      sb.append(this.orderEnum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComplicatedStructStandardSchemeFactory implements SchemeFactory {
    public ComplicatedStructStandardScheme getScheme() {
      return new ComplicatedStructStandardScheme();
    }
  }

  private static class ComplicatedStructStandardScheme extends StandardScheme<ComplicatedStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComplicatedStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case -1: // A
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.a = iprot.readI32();
              struct.setAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -2: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.b = iprot.readI64();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -3: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.c = iprot.readDouble();
              struct.setCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -4: // SHORT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.shortSet = new HashSet<Short>(2*_set0.size);
                short _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readI16();
                  struct.shortSet.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setShortSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -5: // INT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.intSet = new HashSet<Integer>(2*_set3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.intSet.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setIntSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -6: // MIX_STRUCTLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.mixStructlist = new ArrayList<MixStruct>(_list6.size);
                MixStruct _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new MixStruct();
                  _elem7.read(iprot);
                  struct.mixStructlist.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMixStructlistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -7: // SHORT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.shortList = new ArrayList<Short>(_list9.size);
                short _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI16();
                  struct.shortList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setShortListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -8: // ORDERED_STRUCT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.orderedStructMap = new HashMap<Short,OrderedStruct>(2*_map12.size);
                short _key13;
                OrderedStruct _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readI16();
                  _val14 = new OrderedStruct();
                  _val14.read(iprot);
                  struct.orderedStructMap.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setOrderedStructMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -9: // MIX_STRUCT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.mixStructMap = new HashMap<Short,MixStruct>(2*_map16.size);
                short _key17;
                MixStruct _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readI16();
                  _val18 = new MixStruct();
                  _val18.read(iprot);
                  struct.mixStructMap.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setMixStructMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -10: // ORDER_ENUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderEnum = com.meituan.firefly.test.OrderEnum.findByValue(iprot.readI32());
              struct.setOrderEnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComplicatedStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderEnum != null) {
        oprot.writeFieldBegin(ORDER_ENUM_FIELD_DESC);
        oprot.writeI32(struct.orderEnum.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.mixStructMap != null) {
        oprot.writeFieldBegin(MIX_STRUCT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRUCT, struct.mixStructMap.size()));
          for (Map.Entry<Short, MixStruct> _iter20 : struct.mixStructMap.entrySet())
          {
            oprot.writeI16(_iter20.getKey());
            _iter20.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.orderedStructMap != null) {
        oprot.writeFieldBegin(ORDERED_STRUCT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRUCT, struct.orderedStructMap.size()));
          for (Map.Entry<Short, OrderedStruct> _iter21 : struct.orderedStructMap.entrySet())
          {
            oprot.writeI16(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shortList != null) {
        oprot.writeFieldBegin(SHORT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.shortList.size()));
          for (short _iter22 : struct.shortList)
          {
            oprot.writeI16(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mixStructlist != null) {
        oprot.writeFieldBegin(MIX_STRUCTLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mixStructlist.size()));
          for (MixStruct _iter23 : struct.mixStructlist)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intSet != null) {
        oprot.writeFieldBegin(INT_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.intSet.size()));
          for (int _iter24 : struct.intSet)
          {
            oprot.writeI32(_iter24);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shortSet != null) {
        oprot.writeFieldBegin(SHORT_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, struct.shortSet.size()));
          for (short _iter25 : struct.shortSet)
          {
            oprot.writeI16(_iter25);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(C_FIELD_DESC);
      oprot.writeDouble(struct.c);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeI64(struct.b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_FIELD_DESC);
      oprot.writeI32(struct.a);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComplicatedStructTupleSchemeFactory implements SchemeFactory {
    public ComplicatedStructTupleScheme getScheme() {
      return new ComplicatedStructTupleScheme();
    }
  }

  private static class ComplicatedStructTupleScheme extends TupleScheme<ComplicatedStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComplicatedStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetA()) {
        optionals.set(0);
      }
      if (struct.isSetB()) {
        optionals.set(1);
      }
      if (struct.isSetC()) {
        optionals.set(2);
      }
      if (struct.isSetShortSet()) {
        optionals.set(3);
      }
      if (struct.isSetIntSet()) {
        optionals.set(4);
      }
      if (struct.isSetMixStructlist()) {
        optionals.set(5);
      }
      if (struct.isSetShortList()) {
        optionals.set(6);
      }
      if (struct.isSetOrderedStructMap()) {
        optionals.set(7);
      }
      if (struct.isSetMixStructMap()) {
        optionals.set(8);
      }
      if (struct.isSetOrderEnum()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetA()) {
        oprot.writeI32(struct.a);
      }
      if (struct.isSetB()) {
        oprot.writeI64(struct.b);
      }
      if (struct.isSetC()) {
        oprot.writeDouble(struct.c);
      }
      if (struct.isSetShortSet()) {
        {
          oprot.writeI32(struct.shortSet.size());
          for (short _iter26 : struct.shortSet)
          {
            oprot.writeI16(_iter26);
          }
        }
      }
      if (struct.isSetIntSet()) {
        {
          oprot.writeI32(struct.intSet.size());
          for (int _iter27 : struct.intSet)
          {
            oprot.writeI32(_iter27);
          }
        }
      }
      if (struct.isSetMixStructlist()) {
        {
          oprot.writeI32(struct.mixStructlist.size());
          for (MixStruct _iter28 : struct.mixStructlist)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetShortList()) {
        {
          oprot.writeI32(struct.shortList.size());
          for (short _iter29 : struct.shortList)
          {
            oprot.writeI16(_iter29);
          }
        }
      }
      if (struct.isSetOrderedStructMap()) {
        {
          oprot.writeI32(struct.orderedStructMap.size());
          for (Map.Entry<Short, OrderedStruct> _iter30 : struct.orderedStructMap.entrySet())
          {
            oprot.writeI16(_iter30.getKey());
            _iter30.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetMixStructMap()) {
        {
          oprot.writeI32(struct.mixStructMap.size());
          for (Map.Entry<Short, MixStruct> _iter31 : struct.mixStructMap.entrySet())
          {
            oprot.writeI16(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetOrderEnum()) {
        oprot.writeI32(struct.orderEnum.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComplicatedStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.a = iprot.readI32();
        struct.setAIsSet(true);
      }
      if (incoming.get(1)) {
        struct.b = iprot.readI64();
        struct.setBIsSet(true);
      }
      if (incoming.get(2)) {
        struct.c = iprot.readDouble();
        struct.setCIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set32 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortSet = new HashSet<Short>(2*_set32.size);
          short _elem33;
          for (int _i34 = 0; _i34 < _set32.size; ++_i34)
          {
            _elem33 = iprot.readI16();
            struct.shortSet.add(_elem33);
          }
        }
        struct.setShortSetIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set35 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intSet = new HashSet<Integer>(2*_set35.size);
          int _elem36;
          for (int _i37 = 0; _i37 < _set35.size; ++_i37)
          {
            _elem36 = iprot.readI32();
            struct.intSet.add(_elem36);
          }
        }
        struct.setIntSetIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mixStructlist = new ArrayList<MixStruct>(_list38.size);
          MixStruct _elem39;
          for (int _i40 = 0; _i40 < _list38.size; ++_i40)
          {
            _elem39 = new MixStruct();
            _elem39.read(iprot);
            struct.mixStructlist.add(_elem39);
          }
        }
        struct.setMixStructlistIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.shortList = new ArrayList<Short>(_list41.size);
          short _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = iprot.readI16();
            struct.shortList.add(_elem42);
          }
        }
        struct.setShortListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderedStructMap = new HashMap<Short,OrderedStruct>(2*_map44.size);
          short _key45;
          OrderedStruct _val46;
          for (int _i47 = 0; _i47 < _map44.size; ++_i47)
          {
            _key45 = iprot.readI16();
            _val46 = new OrderedStruct();
            _val46.read(iprot);
            struct.orderedStructMap.put(_key45, _val46);
          }
        }
        struct.setOrderedStructMapIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mixStructMap = new HashMap<Short,MixStruct>(2*_map48.size);
          short _key49;
          MixStruct _val50;
          for (int _i51 = 0; _i51 < _map48.size; ++_i51)
          {
            _key49 = iprot.readI16();
            _val50 = new MixStruct();
            _val50.read(iprot);
            struct.mixStructMap.put(_key49, _val50);
          }
        }
        struct.setMixStructMapIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orderEnum = com.meituan.firefly.test.OrderEnum.findByValue(iprot.readI32());
        struct.setOrderEnumIsSet(true);
      }
    }
  }

}

